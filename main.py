import asyncio
import logging
from datetime import datetime, timedelta
from typing import Dict, List
import os
import random

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart, ChatMemberUpdatedFilter, IS_MEMBER, IS_NOT_MEMBER
from aiogram.types import ChatMemberUpdated, InlineKeyboardMarkup, InlineKeyboardButton, ChatPermissions, PollAnswer
from aiohttp import web

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
WEBHOOK_PATH = "/webhook"
WEB_SERVER_HOST = "0.0.0.0"
WEB_SERVER_PORT = 5000
VERIFICATION_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
MESSAGE_CLEANUP_TIME = 600  # 10 –º–∏–Ω—É—Ç —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
BAN_NOTIFICATION_TIME = 180  # 3 –º–∏–Ω—É—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ

# –ú–µ—Ö–∞–Ω–∏–∑–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
HTEST_ENABLED = True
FASTOUT_ENABLED = True

# –§–æ—Ä–º–∞—Ç URL –¥–ª—è Replit
REPL_SLUG = os.getenv('REPL_SLUG', 'workspace')
REPL_OWNER = os.getenv('REPL_OWNER', 'user')
# WEBHOOK_URL = f"https://{REPL_SLUG}-{REPL_OWNER}.replit.app{WEBHOOK_PATH}"
# URL –¥–ª—è –≤–µ–±—Ö—É–∫–∞ (–º—ã –±—É–¥–µ–º –ø–æ–ª—É—á–∞—Ç—å –µ–≥–æ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway)
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–ª–∞—Å—Å –±–æ—Ç–∞
class VerificationBot:
    def __init__(self, token: str):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.pending_verifications: Dict[int, Dict] = {}  # user_id -> verification_data
        self.user_messages: Dict[int, List[int]] = {}    # user_id -> [message_ids]
        self.ban_notifications: Dict[int, int] = {}      # chat_id -> message_id
        self.htest_enabled = HTEST_ENABLED
        self.fastout_enabled = FASTOUT_ENABLED
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        self.dp.chat_member(ChatMemberUpdatedFilter(
            member_status_changed=(IS_NOT_MEMBER, IS_MEMBER)
        ))(self.handle_new_member)
        self.dp.chat_member(ChatMemberUpdatedFilter(
            member_status_changed=(IS_MEMBER, IS_NOT_MEMBER)
        ))(self.handle_member_left)
        self.dp.poll_answer()(self.handle_poll_answer)
        self.dp.callback_query(lambda c: c.data.startswith("reaction_"))(self.handle_reaction)
        self.dp.message(lambda m: m.chat.type in ["group", "supergroup"])(self.handle_message_from_new_member)
        self.dp.message(Command("htest"))(self.toggle_htest)
        self.dp.message(Command("fastout"))(self.toggle_fastout)
        self.dp.message(Command("status"))(self.show_status)
        self.dp.message(CommandStart())(self.start_command)

    async def start_command(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
        try:
            await message.reply("–ü—Ä–∏–≤–µ—Ç! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫ –Ω–∞ Replit.")
            logger.info(f"–û—Ç–≤–µ—Ç –Ω–∞ /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {message.chat.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ /start –≤ —á–∞—Ç {message.chat.id}: {e}")

    async def handle_new_member(self, event: ChatMemberUpdated):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if not self.htest_enabled:
            return

        user = event.new_chat_member.user
        chat = event.chat
        logger.info(f"–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user.id} –≤ —á–∞—Ç–µ {chat.id}")

        restricted_permissions = ChatPermissions(
            can_send_messages=False,
            can_send_media_messages=False,
            can_send_polls=False,
            can_send_other_messages=False,
            can_add_web_page_previews=False,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False
        )

        try:
            await self.bot.restrict_chat_member(chat_id=chat.id, user_id=user.id, permissions=restricted_permissions)
            await self.create_verification_poll(chat.id, user)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

    async def create_verification_poll(self, chat_id: int, user):
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        username = user.username or user.first_name or "–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫"
        poll_question = f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è, {username}\n–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–∫–∏–Ω—å –≥—Ä—É–ø–ø—É"

        poll_options_all = [
            "–Ø —Å–ø–∞–º-–±–æ—Ç –∏ –≥–æ—Ä–∂—É—Å—å —ç—Ç–∏–º",
            "–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–ø–∞–º 24/7",
            "–°–ø–∞–º - —ç—Ç–æ –º–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è",
            "–†–µ–∫–ª–∞–º–∞ –∫–∞–∑–∏–Ω–æ - –º–æ–µ –ø—Ä–∏–∑–≤–∞–Ω–∏–µ",
            "–ü—Ä–æ–¥–∞—é –∫—Ä–∏–ø—Ç–æ-–∫—É—Ä—Å—ã",
            "–ú–ª–º-–º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ —Å–æ —Å—Ç–∞–∂–µ–º",
            "–§–µ–π–∫–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ - –º–æ–π —Ö–ª–µ–±",
            "–ù–∞–∫—Ä—É—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
            "–ë–æ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Ä–µ–∫–ª–∞–º—ã"
        ]
        correct_answer = "–Ø –Ω–µ —Å–ø–∞–º–µ—Ä"
        wrong_answers = random.sample(poll_options_all, 2)
        poll_options = wrong_answers + [correct_answer]
        random.shuffle(poll_options)
        correct_option_id = poll_options.index(correct_answer)

        try:
            poll_message = await self.bot.send_poll(
                chat_id=chat_id,
                question=poll_question,
                options=poll_options,
                is_anonymous=False,
                allows_multiple_answers=False
            )

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="üëç", callback_data=f"reaction_approve_{user.id}"),
                    InlineKeyboardButton(text="üëé", callback_data=f"reaction_reject_{user.id}")
                ]
            ])
            await self.bot.edit_message_reply_markup(
                chat_id=chat_id,
                message_id=poll_message.message_id,
                reply_markup=keyboard
            )

            self.pending_verifications[user.id] = {
                "chat_id": chat_id,
                "poll_id": poll_message.poll.id,
                "message_id": poll_message.message_id,
                "correct_option_id": correct_option_id,
                "deadline": datetime.now() + timedelta(seconds=VERIFICATION_TIMEOUT),
                "user": user
            }
            asyncio.create_task(self.verification_timeout(user.id))
            logger.info(f"–°–æ–∑–¥–∞–Ω –æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")

    async def handle_poll_answer(self, poll_answer: PollAnswer):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–ø—Ä–æ—Å"""
        user = poll_answer.user
        if user.id not in self.pending_verifications:
            return

        verification_data = self.pending_verifications[user.id]
        if poll_answer.poll_id != verification_data["poll_id"]:
            return

        selected_option_id = poll_answer.option_ids[0]
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –æ–ø—Ä–æ—Å, –≤—ã–±—Ä–∞–≤ –æ–ø—Ü–∏—é {selected_option_id}")

        if selected_option_id == verification_data["correct_option_id"]:
            await self.approve_user(user.id)
        else:
            await self.reject_user(user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ–ø—Ä–æ—Å")

    async def handle_reaction(self, callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–∫—Ü–∏–π –∞–¥–º–∏–Ω–æ–≤"""
        if not await self.is_admin(callback.from_user.id, callback.message.chat.id):
            await callback.answer("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏")
            return

        data_parts = callback.data.split("_")
        action, user_id = data_parts[1], int(data_parts[2])

        if user_id not in self.pending_verifications:
            await callback.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –∏–ª–∏ –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω.", show_alert=True)
            try:
                await callback.message.edit_reply_markup(reply_markup=None)
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è {callback.message.message_id}: {e}")
            return

        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –≤—ã–ø–æ–ª–Ω–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        try:
            if action == "approve":
                await self.approve_user(user_id)
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–µ–Ω")
            elif action == "reject":
                await self.reject_user(user_id, "–û—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ {action} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def approve_user(self, user_id: int):
        """–û–¥–æ–±—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        verification_data = self.pending_verifications.pop(user_id, None)
        if not verification_data:
            return

        chat_id = verification_data["chat_id"]

        default_permissions = ChatPermissions(
            can_send_messages=True,
            can_send_media_messages=True,
            can_send_polls=True,
            can_send_other_messages=True,
            can_add_web_page_previews=True,
            can_change_info=False,
            can_invite_users=False,
            can_pin_messages=False
        )

        try:
            await self.bot.restrict_chat_member(chat_id=chat_id, user_id=user_id, permissions=default_permissions)
            await self.bot.delete_message(chat_id=chat_id, message_id=verification_data["message_id"])
            await self.bot.send_message(
                chat_id=chat_id,
                text=f"‚úÖ {verification_data['user'].first_name} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é!",
                disable_notification=True
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–¥–æ–±—Ä–µ–Ω –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def reject_user(self, user_id: int, reason: str):
        """–û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        verification_data = self.pending_verifications.pop(user_id, None)
        if not verification_data:
            return

        chat_id = verification_data["chat_id"]
        user = verification_data["user"]

        try:
            await self.bot.ban_chat_member(chat_id=chat_id, user_id=user_id)
            await self.bot.unban_chat_member(chat_id=chat_id, user_id=user_id)
            await self.bot.delete_message(chat_id=chat_id, message_id=verification_data["message_id"])
            ban_message = await self.bot.send_message(
                chat_id=chat_id,
                text=f"üö´ {user.first_name} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≥—Ä—É–ø–ø—ã. –ü—Ä–∏—á–∏–Ω–∞: {reason}",
                disable_notification=True
            )
            self.ban_notifications[chat_id] = ban_message.message_id
            asyncio.create_task(self.remove_ban_notification(chat_id, ban_message.message_id))
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —á–∞—Ç–∞ {chat_id}: {reason}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

    async def verification_timeout(self, user_id: int):
        """–¢–∞–π–º–µ—Ä –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
        await asyncio.sleep(VERIFICATION_TIMEOUT)
        if user_id in self.pending_verifications:
            await self.reject_user(user_id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    async def remove_ban_notification(self, chat_id: int, message_id: int):
        """–£–¥–∞–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ"""
        await asyncio.sleep(BAN_NOTIFICATION_TIME)
        try:
            await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
            self.ban_notifications.pop(chat_id, None)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–∞–Ω–µ —É–¥–∞–ª–µ–Ω–æ –≤ —á–∞—Ç–µ {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {e}")

    async def handle_message_from_new_member(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        if not self.fastout_enabled or not message.from_user:
            return

        user_id = message.from_user.id
        if user_id in self.pending_verifications:
            return

        if user_id not in self.user_messages:
            self.user_messages[user_id] = []
        self.user_messages[user_id].append(message.message_id)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —á–∞—Ç–µ {message.chat.id}: {message.text}")

    async def handle_member_left(self, event: ChatMemberUpdated):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
        if not self.fastout_enabled:
            return

        user_id = event.new_chat_member.user.id
        chat_id = event.chat.id

        if user_id in self.user_messages:
            for message_id in self.user_messages[user_id]:
                try:
                    await self.bot.delete_message(chat_id=chat_id, message_id=message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
            del self.user_messages[user_id]
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–¥–∞–ª–µ–Ω—ã –∏–∑ —á–∞—Ç–∞ {chat_id}")

    async def toggle_htest(self, message: types.Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ HTest"""
        await self.toggle_mechanism(message, "htest")

    async def toggle_fastout(self, message: types.Message):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–∞ FastOut"""
        await self.toggle_mechanism(message, "fastout")

    async def toggle_mechanism(self, message: types.Message, mechanism: str):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        try:
            if not await self.is_admin(message.from_user.id, message.chat.id):
                await message.reply("–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–æ—Ç–∞")
                return

            args = message.text.split()
            if len(args) < 2:
                status = self.htest_enabled if mechanism == "htest" else self.fastout_enabled
                await message.reply(f"–ú–µ—Ö–∞–Ω–∏–∑–º {mechanism}: {'–≤–∫–ª—é—á–µ–Ω' if status else '–≤—ã–∫–ª—é—á–µ–Ω'}")
                return

            action = args[1].lower()
            if action not in ["on", "off"]:
                await message.reply(f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /{mechanism} on|off")
                return

            new_state = (action == "on")
            if mechanism == "htest":
                self.htest_enabled = new_state
            else:
                self.fastout_enabled = new_state

            await message.reply(f"–ú–µ—Ö–∞–Ω–∏–∑–º {mechanism} {'–≤–∫–ª—é—á–µ–Ω' if new_state else '–≤—ã–∫–ª—é—á–µ–Ω'}")
            logger.info(f"–ú–µ—Ö–∞–Ω–∏–∑–º {mechanism} –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ {action} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /{mechanism} –æ—Ç {message.from_user.id}: {e}")

    async def show_status(self, message: types.Message):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞"""
        status_text = f"""
ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
üìä –ú–µ—Ö–∞–Ω–∏–∑–º—ã:
‚Ä¢ HTest (–æ–ø—Ä–æ—Å—ã): {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if self.htest_enabled else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω'}
‚Ä¢ FastOut (–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ): {'‚úÖ –≤–∫–ª—é—á–µ–Ω' if self.fastout_enabled else '‚ùå –≤—ã–∫–ª—é—á–µ–Ω'}
‚è± –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏:
‚Ä¢ –í—Ä–µ–º—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {VERIFICATION_TIMEOUT // 60} –º–∏–Ω
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {MESSAGE_CLEANUP_TIME // 60} –º–∏–Ω
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–∞–Ω–µ: {BAN_NOTIFICATION_TIME // 60} –º–∏–Ω
üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {len(self.pending_verifications)}
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {len(self.user_messages)}
        """
        logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∑–∞–ø—Ä–æ—à–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id} –≤ —á–∞—Ç–µ {message.chat.id}")
        try:
            await message.reply(status_text)
            logger.info(f"–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {message.chat.id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ —á–∞—Ç {message.chat.id}: {e}")

    async def is_admin(self, user_id: int, chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        try:
            chat_member = await self.bot.get_chat_member(chat_id=chat_id, user_id=user_id)
            return chat_member.status in ["creator", "administrator"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ –¥–ª—è {user_id} –≤ —á–∞—Ç–µ {chat_id}: {e}")
            return False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞
async def on_startup(app):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        await bot.bot.delete_webhook(drop_pending_updates=True)
        await bot.bot.set_webhook(WEBHOOK_URL, allowed_updates=["message", "callback_query", "poll_answer", "chat_member"])
        logger.info(f"–í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        webhook_info = await bot.bot.get_webhook_info()
        logger.info(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–µ–±—Ö—É–∫–µ: {webhook_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}")

async def on_shutdown(app):
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    try:
        await bot.bot.delete_webhook(drop_pending_updates=True)
        await bot.bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –≤–µ–±—Ö—É–∫ —É–¥–∞–ª—ë–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞
async def webhook_handler(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–µ–±—Ö—É–∫–∞"""
    logger.debug(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {request.method} {request.url} from {request.remote}")
    if request.method == "POST":
        try:
            data = await request.json()
            logger.debug(f"–î–∞–Ω–Ω—ã–µ –≤–µ–±—Ö—É–∫–∞: {data}")
            update = types.Update(**data)
            await bot.dp.feed_update(bot.bot, update)
            return web.json_response({"status": "ok"})
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞: {e}")
            return web.json_response({"status": "error", "message": str(e)}, status=500)
    logger.warning(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥: {request.method}")
    return web.json_response({"status": "method not allowed"}, status=405)

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = web.Application()
bot = None

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    global bot
    token = os.environ.get('TELEGRAM_BOT_TOKEN')
    if not token:
        logger.error("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    logger.info(f"REPL_SLUG: {REPL_SLUG}, REPL_OWNER: {REPL_OWNER}, WEBHOOK_URL: {WEBHOOK_URL}")

    bot = VerificationBot(token)
    app.router.add_post(WEBHOOK_PATH, webhook_handler)
    app.router.add_get("/", lambda _: web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"))
    app.on_startup.append(on_startup)
    app.on_cleanup.append(on_shutdown)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, WEB_SERVER_HOST, WEB_SERVER_PORT)
    try:
        await site.start()
        logger.info(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {WEB_SERVER_HOST}:{WEB_SERVER_PORT}")
        await asyncio.Event().wait()  # –ñ–¥—ë–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(main())